ID,Category,Human Error,Description
S01,Slip,Typos & Mispellings,"Typos and misspellings may occur in code comments, documentation (and other development artifacts), or when typing the name of a variable, function, or class. Examples include misspelling a variable name, writing down the wrong number/name/word during requirements elicitation, referencing the wrong function in a code comment, and inconsistent whitespace (that does not result in a syntax error)."
S02,Slip,Syntax Errors,"Any error in coding language syntax that impacts the executability of the code. Note that Logical Errors (e.g. += instead of +) are not Syntax Errors. Examples include mixing tabs and spaces (e.g. Python), unmatched brackets/braces/parenthesis/quotes, and missing semicolons (e.g. Java)."
S03,Slip,Overlooking Documented Information,"Errors resulting from overlooking (internally and externally) documented information, such as project descriptions, stakeholder requirements, API/library/tool/framework documentation, coding standards, programming language specifications, bug/issue reports, and looking at the wrong version of documentation or documentation for the wrong project/software."
S04,Slip,Multitasking Errors,Errors resulting from multitasking.
S05,Slip,Hardware Interaction Errors,"Attention failures while using computer peripherals, such as mice, keyboard, and cables. Examples include copy/paste errors, clicking the wrong button, using the wrong keyboard shortcut, and incorrectly plugging in cables."
S06,Slip,Overlooking Proposed Code Changes,Errors resulting from lack of attention during formal/informal code review.
S07,Slip,Overlooking Existing Functionality,"Errors resulting from overlooking existing functionality, such as reimplementing variables, functions, and classes that already exist, or reimplementing functionality that already exists in a standard library."
S08,Slip,General Attentional Failure,"Only use this category if you believe your error to be the result of a lack of attention, but no other slip category fits."
L01,Lapse,Forgetting to Finish a Development Task,"Forgetting to finish a development task. Examples include forgetting to implement a required feature, forgetting to finish a user story, and forgetting to deploy a security patch."
L02,Lapse,Forgetting to Fix a Defect,"Forgetting to fix a defect that you encountered, but chose not to fix right away."
L03,Lapse,Forgetting to Remove Development Artifacts,"Forgetting to remove debug log files, dead code, informal test code, commented out code, test databases, backdoors, etc. Examples include leaving unnecessary code in the comments, and leaving notes in internal development documentation."
L04,Lapse,Working With Outdated Source Code,"Forgetting to git-pull (or equivalent in other version control systems), or using an outdated version of a library."
L05,Lapse,Forgetting an Import Statement,"Forgetting to import a necessary library, class, variable, or function, or forgetting to access a property, attribute, or argument."
L06,Lapse,Forgetting to Save Work,"Forgetting to push code, or forgetting to backup/save data or documentation."
L07,Lapse,Forgetting Previous Development Discussion,Errors resulting from forgetting details from previous development discussions.
L08,Lapse,General Memory Failure,"Only use this category if you believe your error to be the result of a memory failure, but no other lapse category fits."
M01,Mistake,Code Logic Errors,"A code logic error is one in which the code executes (i.e. actually runs), but produces an incorrect output/behavior due to incorrect logic. Examples include using incorrect operators (e.g. += instead of +), erroneous if/else statements, incorrect variable initializations, problems with variable scope, and omission of necessary logic. "
M02,Mistake,Incomplete Domain Knowledge,"Errors resulting from incomplete knowledge of the software system's target domain (e.g. banking, astrophysics)."
M03,Mistake,Wrong Assumption Errors,"Errors resulting from an incorrect assumption about system requirements, stakeholder expectations, project environments (e.g. coding languages and frameworks), library functionality, and program inputs."
M04,Mistake,Internal Communication Errors,Errors resulting from inadequate communication between development team members.
M05,Mistake,External Communication Errors,Errors resulting from inadequate communication with project stakeholders or third-party contractors.
M06,Mistake,Solution Choice Errors,"Misunderstood problem-solving methods/techniques result in analyzing the problem incorrectly and choosing the wrong solution. For example, choosing to implement a database system in Python rather than using SQL. Overconfidence in a solution choice also falls under this category."
M07,Mistake,Time Management Errors,"Errors resulting from a lack of time management, such as failing to allocate enough time for the implementation of a feature or procrastination."
M08,Mistake,Inadequate Testing,"Failure to implement necessary test cases, failure to consider necessary test inputs, or failure to implement a certain type of testing (e.g. unit, penetration, integration) when it is necessary."
M09,Mistake,Incorrect/Insufficient Configuration,"Errors in configuration of libraries/frameworks/environments or errors related to missing configuration options. Examples include misconfigured IDEs, improper directory structure for a specific programming language, and missing SSH keys."
M10,Mistake,Code Complexity Errors,Errors resulting from misunderstood code due to poor documentation or unnecessary complexity. Examples include too many nested if/else statements or for-loops and poorly named variables/functions/classes/files.
M11,Mistake,Internationalization/String Encoding Errors,Errors related to internationalization and/or string/character encoding.
M12,Mistake,Inadequate Experience Errors,"Errors resulting from inadequate experience/unfamiliarity with a language, library, framework, or tool."
M13,Mistake,Insufficient Tooling Access Errors,"Errors resulting from not having sufficient access to necessary tooling. Examples include not having access to a specific operating system, library, framework, hardware device, or not having the necessary permissions to complete a development task."
M14,Mistake,Workflow Order Errors,"Errors resulting from working out of order, such as implementing dependent features in the wrong order, implementing code before the design is stabilized, releasing code that is not ready to be released, or skipping a workflow step."
M15,Mistake,General Planning Failure,"Only use this category if you believe your error to be the result of a planning failure, but no other mistake category fits."
Other,Other,Other,Only use this category if none of the other categories describe your error.