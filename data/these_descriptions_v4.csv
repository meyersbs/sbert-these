ID,Category,Human Error,Description,Introduced,Updated,Sources,Notes
S01,Slip,Typos & Mispellings,"Typos and misspellings may occur in code comments, documentation (and other development artifacts), or when typing the name of a variable, function, or class. Examples include misspelling a variable name, writing down the wrong number/name/word during requirements elicitation, referencing the wrong function in a code comment, and inconsistent whitespace (that does not result in a syntax error).",v1.0,v3.0,GitHub Data,v3.0: Update description with examples
S02,Slip,Syntax Errors,"Any error in coding language syntax that impacts the executability of the code. Note that Logical Errors (e.g. += instead of +) are not Syntax Errors. Examples include mixing tabs and spaces (e.g. Python), unmatched brackets/braces/parenthesis/quotes, and missing semicolons (e.g. Java). Inappropriate Whitespace Style. The source code contains whitespace that is inconsistent across the code or does not follow expected standards for the product.",v1.0,v3.0,Research,v3.0: Update description with examples
S03,Slip,Overlooking Documented Information,"Errors resulting from overlooking (internally and externally) documented information, such as project descriptions, stakeholder requirements, API/library/tool/framework documentation, coding standards, programming language specifications, bug/issue reports, and looking at the wrong version of documentation or documentation for the wrong project/software. Use of Obsolete Function. The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained. Inconsistency Between Implementation and Documented Design. The implementation of the product is not consistent with the design as described within the relevant documentation.",v1.0,"v2.0, v3.0","Research, User Study","v2.0: Added ""coding standards, ..."" to description.
v3.0: Added ""internally and externally"" to description; Added wrong documentation"
S04,Slip,Multitasking Errors,"Errors resulting from multitasking, i.e. working on multiple software engineering tasks at the same time.",v1.0,v4.0,GitHub Data,v4.0: Update description
S05,Slip,Hardware Interaction Errors,"Attention failures while using computer peripherals, such as mice, keyboard, and cables. Examples include copy/paste errors, clicking the wrong button, using the wrong keyboard shortcut, and incorrectly plugging in cables.",v2.0,,GitHub Data,
S06,Slip,Overlooking Proposed Code Changes,"Errors resulting from lack of attention during formal/informal code review. Examples include overlooking incorrect logic, or skipping files, functions, or classes during a review.",v2.0,v4.0,GitHub Data,v4.0: Update description
S07,Slip,Overlooking Existing Functionality,"Errors resulting from overlooking existing functionality, such as reimplementing or duplicating variables, functions, and classes that already exist, or reimplementing functionality that already exists in a standard library. Other examples include deleting necessary variables, functions, and classes. Use of Redundant Code. The product has multiple functions, methods, procedures, macros, etc. that contain the same code.",v2.0,v4.0,User Study,v4.0: Update description
S08,Slip,General Attentional Failure,"Only use this category if you believe your error to be the result of a lack of attention, but no other slip category fits.",v1.0,,,
L01,Lapse,Forgetting to Finish a Development Task,"Forgetting to finish a development task. Examples include forgetting to implement a required feature, forgetting to finish a user story, and forgetting to deploy a security patch. Missing Synchronization. The product utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource. Missing Cryptographic Step. The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by the algorithm.",v1.0,v3.0,Experience,"v3.0: Update title
v3.0: Update description with examples"
L02,Lapse,Forgetting to Fix a Defect,"Forgetting to fix a defect that you encountered, but chose not to fix right away.",v1.0,,Research,
L03,Lapse,Forgetting to Remove Development Artifacts,"Forgetting to remove debug log files, dead code, informal test code, commented out code, test databases, backdoors, etc. Examples include leaving unnecessary code in the comments, and leaving notes in internal development documentation. Improper Output Neutralization for Logs. The product does not neutralize or incorrectly neutralizes output that is written to logs. Active Debug Code. The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information. Dead Code. The product contains dead code, which can never be executed. Irrelevant Code. The product contains code that is not essential for execution, i.e. makes no state changes and has no side effects that alter data or control flow, such that removal of the code would have no impact to functionality or correctness.",v1.0,v3.0,Research,v3.0: Update description with examples
L04,Lapse,Working With Outdated Source Code,"Forgetting to git-pull (or equivalent in other version control systems), or using an outdated version of a library.",v1.0,,GitHub Data,
L05,Lapse,Forgetting an Import Statement,"Forgetting to import a necessary library, class, variable, or function, or forgetting to access a property, attribute, or argument. Examples include forgetting to import python's sys library, forgetting to include a header file in C, or forgetting to pass an argument to a function.",v1.0,"v2.0, v4.0",GitHub Data,"v2.0: Added ""property"", ""attribute"", and ""argument"" to description
v4.0: Update description"
L06,Lapse,Forgetting to Save Work,"Forgetting to push code, or forgetting to backup/save data or documentation.",v1.0,,Research,
L07,Lapse,Forgetting Previous Development Discussion,Errors resulting from forgetting details from previous development discussions.,v2.0,,GitHub Data,
L08,Lapse,General Memory Failure,"Only use this category if you believe your error to be the result of a memory failure, but no other lapse category fits.",v1.0,,,
M01,Mistake,Code Logic Errors,"A code logic error is one in which the code executes (i.e. actually runs), but produces an incorrect output/behavior due to incorrect logic. Examples include using incorrect operators (e.g. += instead of +), erroneous if/else statements, incorrect variable initializations, problems with variable scope, and omission of necessary logic. Improper Handling of Insufficient Permissions or Privileges. The product does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the product in an invalid state. Missing Default Case in Multiple Condition Expression. The code does not have a default case in an expression with multiple conditions, such as a switch statement. Function Call with Incorrectly Specified Arguments. The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses. Use of Incorrect Operator. The product accidentally uses the wrong operator, which changes the logic in security-relevant ways. Omitted Break Statement in Switch. The product omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition. Operator Precedence Logic Error. The product uses an expression in which operator precedence causes incorrect logic to be used. Loop with Unreachable Exit Condition ('Infinite Loop'). The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop. Comparison Using Wrong Factors. The code performs a comparison between two entities, but the comparison examines the wrong factors or characteristics of the entities, which can lead to incorrect results and resultant weaknesses. Time-of-check Time-of-use (TOCTOU) Race Condition. The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state. Wrap-around Error. Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore 'wraps around' to a very small, negative, or undefined value. Divide by Zero. The product divides a value by zero.",v1.0,v3.0,"Research, GitHub Data","v3.0: Added ""actually runs"" to description"
M02,Mistake,Incomplete Domain Knowledge,"Errors resulting from incomplete knowledge of the software system's target domain (e.g. banking, astrophysics). Examples include planning/designing a system without understanding the nuances of the domain.",v1.0,v4.0,Research,v4.0: Update description
M03,Mistake,Wrong Assumption Errors,"Errors resulting from an incorrect assumption about system requirements, stakeholder expectations, project environments (e.g. coding languages and frameworks), library functionality, and program inputs. Improper Input Validation. The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.",v1.0,,Research,
M04,Mistake,Internal Communication Errors,"Errors resulting from inadequate communication between development team members. Examples include misunderstanding development discussion, misinterpretting or providing ambiguous instructions, communicating using the wrong medium (e.g. oral vs. written), or communicating ineffectively (e.g. too formal/informal, too much unecessarilly complex language, hostile language/body language).",v1.0,v4.0,Research,v4.0: Update description
M05,Mistake,External Communication Errors,"Errors resulting from inadequate communication with project stakeholders or third-party contractors. Examples include providing ambiguous or unclear directions to third-parties or users, or misinterpretting stakeholder feedback, communicating using the wrong medium (e.g. oral vs. written), or communicating ineffectively (e.g. too formal/informal, too much unecessarilly complex language, hostile language/body language).",v1.0,v4.0,Research,v4.0: Update description
M06,Mistake,Solution Choice Errors,"Misunderstood problem-solving methods/techniques result in analyzing the problem incorrectly and choosing the wrong solution. For example, choosing to implement a database system in Python rather than using SQL, or choosing the wrong software design pattern. Overconfidence in a solution choice also falls under this category. Use of Single-factor Authentication. The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme. Use of Client-Side Authentication. A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check. Use of Hard-coded, Security-relevant Constants. The product uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change. Use of Unmaintained Third Party Components. The product relies on third-party components that are not actively supported or maintained by the original developer or a trusted proxy for the original developer. Use of Hard-coded Credentials. The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data",v1.0,"v2.0, v4.0",Research,"v2.0: Added ""overconfidence"" to description
v4.0: Updated description"
M07,Mistake,Time Management Errors,"Errors resulting from a lack of time management, such as failing to allocate enough time for the implementation of a feature, procrastinating a development task, or predicting the time required for a task incorrectly.",v1.0,"v2.0, v4.0",GitHub Data,"v2.0: Added ""procrastination"" to description
v4.0: Update description"
M08,Mistake,Inadequate Testing,"Failure to implement necessary test cases, failure to consider necessary test inputs, failure to implement a certain type of testing (e.g. unit, penetration, integration) when it is necessary, or failure to consider edge cases or unexpected inputs. Improper Check for Unusual or Exceptional Conditions. The product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.",v1.0,v4.0,GitHub Data,v4.0: Update description
M09,Mistake,Incorrect/Insufficient Configuration,"Errors in configuration of libraries/frameworks/environments or errors related to missing configuration options. Examples include misconfigured IDEs or text editors, improper directory structure for a specific programming language, missing SSH keys, missing or incorrectly named database fields or tables, missing or incorrectly named/formatted configuration files, or not installing a required library. Incorrect Privilege Assignment. A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor. Insufficient Granularity of Access Control. The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets. Use of Default Credentials. The product uses default credentials (such as passwords or cryptographic keys) for potentially critical functionality.",v1.0,"v3.0, v4.0",GitHub Data,"v3.0: Update description with examples
v4.0: Update description"
M10,Mistake,Code Complexity Errors,"Errors resulting from misunderstood code due to poor documentation or unnecessary complexity. Examples include too many nested if/else statements or for-loops and poorly named variables/functions/classes/files. Inconsistent Naming Conventions for Identifiers. The product's code, documentation, or other artifacts do not consistently use the same naming conventions for variables, callables, groups of related callables, I/O capabilities, data types, file names, or similar types of elements. Use of Same Variable for Multiple Purposes. The code contains a callable, block, or other code element in which the same variable is used to control more than one unique task or store more than one instance of data. Class with Excessively Deep Inheritance. A class has an inheritance level that is too high, i.e., it has a large number of parent classes. Source Code File with Excessive Number of Lines of Code. A source code file has too many lines of code. Excessively Deep Nesting. The code contains a callable or other code grouping in which the nesting / branching is too deep.",v1.0,v2.0,Research,v2.0: Updated title
M11,Mistake,Internationalization/String Encoding Errors,"Errors related to internationalization and/or string/character encoding. Examples include using ASCII intead of unicode, using UTF8 when UTF16 was necessary, failure to design the system with internationalization in mind, or failing to verify the character length of user input. Improper Handling of Unicode Encoding. The product does not properly handle when an input contains Unicode encoding. Improper Handling of Alternate Encoding. The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.",v2.0,v4.0,GitHub Data,v4.0: Update description
M12,Mistake,Inadequate Experience Errors,"Errors resulting from inadequate experience/unfamiliarity with a language, library, framework, or tool.",v2.0,,GitHub Data,
M13,Mistake,Insufficient Tooling Access Errors,"Errors resulting from not having sufficient access to necessary tooling. Examples include not having access to a specific operating system, library, framework, hardware device, or not having the necessary permissions to complete a development task.",v2.0,,GitHub Data,
M14,Mistake,Workflow Order Errors,"Errors resulting from working out of order, such as implementing dependent features in the wrong order, implementing code before the design is stabilized, releasing code that is not ready to be released, or skipping a workflow step.",v2.0,,GitHub Data,
M15,Mistake,General Planning Failure,"Only use this category if you believe your error to be the result of a planning failure, but no other mistake category fits.",v1.0,,,
Other,Other,Other,Only use this category if none of the other categories describe your error.,v1.0,,,